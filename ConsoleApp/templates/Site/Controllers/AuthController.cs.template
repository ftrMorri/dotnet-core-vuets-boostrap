using System.IdentityModel.Tokens.Jwt;
using System.Net;
using System.Security.Claims;
using System.Text;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Routing;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using [[NAME]].Services.Models;
using [[NAME]].Services.Requests;
using [[NAME]].Services.Services;

namespace [[NAME]].Site.Controllers;

[ApiController]
[Route("api/[controller]")]
public class AuthController : ControllerBase
{
    private readonly ILogger<UsersController> _logger;
    private readonly IConfiguration _configuration;
    private readonly UserManager<IdentityUser> _userManager;
    private readonly RoleManager<IdentityRole> _roleManager;
    private readonly IUserService _userService;

    public AuthController(ILogger<UsersController> logger, IConfiguration configuration, UserManager<IdentityUser> userManager, RoleManager<IdentityRole> roleManager, IUserService userService)
    {
        _logger = logger;
        _configuration = configuration;
        _userManager = userManager;
        _roleManager = roleManager;
        _userService = userService;
    }

    [HttpPost(), Route("login", Name = "Login")]
    public async Task<AuthenticationResponse> Login([AsParameters]AuthenticationRequest request)
    {
        if (request == null || string.IsNullOrEmpty(request.Username) || string.IsNullOrEmpty(request.Password))
            return new AuthenticationResponse()
            {
                Status = "Failed",
                Message = "Failed"
            };

        var user = await _userManager.FindByNameAsync(request.Username);

        if (user != null && await _userManager.CheckPasswordAsync(user, request.Password))
        {
            var userRoles = await _userManager.GetRolesAsync(user);

            var authClaims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, user.UserName ?? ""),
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
            };

            foreach (var userRole in userRoles)
            {
                authClaims.Add(new Claim(ClaimTypes.Role, userRole));
            }

            var token = GetToken(authClaims);
            var tokenString = new JwtSecurityTokenHandler().WriteToken(token);
            var refreshTokenString = await _userService.CreateRefreshToken(user.UserName, tokenString);

            return new AuthenticationResponse
            {
                AccessToken = tokenString,
                RefreshToken = refreshTokenString,
                Expiration = token.ValidTo
            };
        }
        return new AuthenticationResponse()
        {
            Status = "Failed",
            Message = "Failed"
        };
    }

    [AllowAnonymous]
    [HttpPost(), Route("renew", Name = "Renew")]
    public async Task<AuthenticationResponse> Renew([AsParameters]RenewRequest request)
    {
        if (request == null || string.IsNullOrEmpty(request.AccessToken) || string.IsNullOrEmpty(request.RefreshToken))
            throw new HttpRequestException("Missing parameters", null, System.Net.HttpStatusCode.Unauthorized);

        var principal = GetPrincipalFromExpiredToken(request.AccessToken);
        var username = principal.Identity?.Name;
        if (string.IsNullOrEmpty(username))
            throw new HttpRequestException("Invalid parameters", null, System.Net.HttpStatusCode.Unauthorized);

        var existingRefreshToken = await _userService.GetRefreshToken(username, request.RefreshToken);

        var user = await _userManager.FindByNameAsync(username);

        if (user != null && existingRefreshToken != null)
        {
            var userRoles = await _userManager.GetRolesAsync(user);

            var authClaims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, user.UserName ?? ""),
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
            };

            foreach (var userRole in userRoles)
            {
                authClaims.Add(new Claim(ClaimTypes.Role, userRole));
            }

            var token = GetToken(authClaims);
            var tokenString = new JwtSecurityTokenHandler().WriteToken(token);
            var refreshTokenString = await _userService.CreateRefreshToken(user.UserName, tokenString);

            return new AuthenticationResponse
            {
                AccessToken = tokenString,
                RefreshToken = refreshTokenString,
                Expiration = token.ValidTo
            };
        }
        throw new HttpRequestException("Invalid authentication", null, System.Net.HttpStatusCode.Unauthorized);
    }


    private JwtSecurityToken GetToken(List<Claim> authClaims)
    {
        var authSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["JWT:Secret"] ?? ""));

        var token = new JwtSecurityToken(
            issuer: _configuration["JWT:ValidIssuer"],
            audience: _configuration["JWT:ValidAudience"],
            expires: DateTime.Now.AddMinutes(15),
            claims: authClaims,
            signingCredentials: new SigningCredentials(authSigningKey, SecurityAlgorithms.HmacSha256)
            );

        return token;
    }

	private ClaimsPrincipal GetPrincipalFromExpiredToken(string token)
	{
		var secret = Encoding.UTF8.GetBytes(_configuration["JWT:Secret"] ?? "");

		var tokenValidationParameters = new TokenValidationParameters
		{
            ValidIssuer = _configuration["JWT:ValidIssuer"],
            ValidAudience = _configuration["JWT:ValidAudience"],
			ValidateIssuer = true,
			ValidateAudience = true,
			ValidateLifetime = false,
			ValidateIssuerSigningKey = true,
			IssuerSigningKey = new SymmetricSecurityKey(secret),
			ClockSkew = TimeSpan.Zero
		};

		var tokenHandler = new JwtSecurityTokenHandler();
		var principal = tokenHandler.ValidateToken(token, tokenValidationParameters, out SecurityToken securityToken);
		JwtSecurityToken? jwtSecurityToken = securityToken as JwtSecurityToken;
		if (jwtSecurityToken == null || !jwtSecurityToken.Header.Alg.Equals(SecurityAlgorithms.HmacSha256, StringComparison.InvariantCultureIgnoreCase))
		{
			throw new SecurityTokenException("Invalid token");
		}

		return principal;
	}       
}
