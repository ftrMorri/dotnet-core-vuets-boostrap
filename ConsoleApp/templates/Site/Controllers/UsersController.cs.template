using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Routing;
using Microsoft.EntityFrameworkCore;
using System.Net;
using [[NAME]].Services.Models;
using [[NAME]].Services.Services;
using [[NAME]].Services.Requests;

namespace [[NAME]].Site.Controllers;

[ApiController]
[Route("api/[controller]")]
public class UsersController : ControllerBase
{
    private readonly ILogger<UsersController> _logger;
    private readonly IConfiguration _configuration;
    private readonly UserManager<IdentityUser> _userManager;
    private readonly RoleManager<IdentityRole> _roleManager;
    private readonly IUserService _userService;

    public UsersController(ILogger<UsersController> logger, IConfiguration configuration, UserManager<IdentityUser> userManager, RoleManager<IdentityRole> roleManager)
    {
        _logger = logger;
        _configuration = configuration;
        _userManager = userManager;
        _roleManager = roleManager;
    }

    public UsersController(ILogger<UsersController> logger, 
        IConfiguration configuration, 
        UserManager<IdentityUser> userManager, 
        RoleManager<IdentityRole> roleManager,
        IUserService userService)
    {
        _logger = logger;
        _configuration = configuration;
        _userManager = userManager;
        _roleManager = roleManager;
        _userService = userService;
    }

    [HttpPost(), Route("createUser", Name = "CreateUser")]
    [ProducesResponseType(typeof(UserModel), (int)HttpStatusCode.OK)]
    public async Task<ActionResult<UserModel>> CreateUser([AsParameters]UserCreateRequest request)
    {
        var created = await _userService.CreateUser(request);
        return Ok(created);
    }

    [HttpPost(), Route("editUser", Name = "EditUser")]
    [ProducesResponseType(typeof(UserModel), (int)HttpStatusCode.OK)]
    public async Task<ActionResult<UserModel>> EditUser([AsParameters] UserEditRequest request)
    {
        var updated = await _userService.EditUser(request);
        if (updated == null)
        {
            return NoContent();
        }
        return Ok(updated);
    }

    [HttpPost(), Route("searchUsers", Name = "SearchUsers")]
    [ProducesResponseType(typeof(List<UserModel>), (int)HttpStatusCode.OK)]
    public async Task<ActionResult<List<UserModel>>> SearchUsers([AsParameters]UserSearchRequest request)
    {
        var result = await _userService.SearchUsers(request);
        return Ok(result);
    }

    [HttpPost(), Route("getUser", Name = "GetUser")]
    [ProducesResponseType(typeof(UserModel), (int)HttpStatusCode.OK)]
    public async Task<ActionResult<UserModel>> GetUser([AsParameters] UserGetRequest request)
    {
        var user = await _userManager.Users.FirstOrDefaultAsync(u => u.Id == request.UserId);

        if (user is null)
            return NoContent();

        return Ok(new UserModel
        {
            Id = user.Id,
            Email = user.Email,
            UserName = user.UserName,
            Roles = (await _userManager.GetRolesAsync(user)).ToList(),
        });
    }
}
