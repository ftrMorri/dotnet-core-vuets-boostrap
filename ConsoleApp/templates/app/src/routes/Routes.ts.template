import { createRouter, createWebHistory, RouteLocation, RouteLocationNormalized, RouteMeta, RouteRecordRaw, useRouter } from "vue-router";
import { AuthenticationStatus, User, UserRole } from "../core/user";

const routes: Array<RouteRecordRaw> = [
  {
    path: "/home",
    name: "home",
    component: () => import("../pages/home/Home.vue"),
    meta: {
      "icon": "inbox",
      "label": "Home",
      "show": true,
    },
    children: [
      {
        path: "about",
        name: "about",
        component: () => import("../pages/home/About.vue"),
        meta: {
          "icon": "inbox",
          "label": "About",
          "separator": true,
          "show": true,
        }
      },      
      {
        path: "forecasts",
        name: "forecasts",
        component: () => import("../pages/home/Forecasts.vue"),
        meta: {
          "icon": "inbox",
          "label": "Forecasts",
          "separator": true,
          "show": true,
        }
      },
    ],
  },
  {
    path: "/user",
    name: "user",
    component: () => import("../pages/user/User.vue"),
    meta: {
      "icon": "inbox",
      "label": "Users",
      "separator": false,
      "show": true,
      "roleRequired": [UserRole.Administrator],
    },
    children: [
      {
          path: "list",
          name: "user_list",
          component: () => import("../pages/user/List.vue"),
          meta: {
            "icon": "inbox",
            "label": "Users",
            "separator": true,
            "show": true,
            "roleRequired": [UserRole.Administrator],
          }
      },
      {
        path: "user/:mode/:userId?",
        name: "user_edit",
        component: () => import("../pages/user/Edit.vue"),
        meta: {
          "icon": "inbox",
          "label": "User",
          "separator": false,
          "show": false,
          "roleRequired": [UserRole.Administrator],
        },
        props: true,
    },
    ]
  },
  {
    path: "/login",
    name: "login",
    component: () => import("../pages/login/Login.vue"),
    meta: {
      "icon": "inbox",
      "label": "Login",
      "separator": false,
      "show": true,
      "authState": AuthenticationStatus.NotAuthenticated
    }
  },
  {
    path: "/unauthorized",
    name: "unauthorized",
    component: () => import("../pages/login/Unauthorized.vue"),
    meta: {
      "icon": "inbox",
      "label": "Unauthorized",
      "separator": false,
      "show": false,
    }
  },
];

const Router = createRouter({
  history: createWebHistory(),
  routes
});

export function RequiredRoles(routeMeta: RouteMeta): UserRole[] | null {
  const rolesRequired = routeMeta.roleRequired as UserRole[] | null ?? null;
  return rolesRequired;
}

export function RequiredAuthState(routeMeta: RouteMeta): AuthenticationStatus | null {
  const authState = routeMeta.authState as AuthenticationStatus | null ?? null;
  return authState;
}

export function CanAccess(routeMeta: RouteMeta | undefined, user: User | null): boolean {
  if (routeMeta == null) {
    return true;
  }
  
  var routeRoles = RequiredRoles(routeMeta);
  var routeAuthState = RequiredAuthState(routeMeta);
  
  if (routeRoles != null && !user?.roles.some(r => routeRoles?.includes(r))) {
    return false;
  }

  if (routeAuthState && user == null) {
    return false;
  }

  return true;
}

Router.beforeEach((to, from, next) => {
  if (CanAccess(to.meta, User.GetCurrent())) {
      return next();
    } else {
      useRouter().push({
        name: 'unauthorized'
      });
    }
  });

export default Router;
