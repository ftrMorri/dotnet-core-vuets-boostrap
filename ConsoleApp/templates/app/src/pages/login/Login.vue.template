<script setup lang="ts">
import { reactive, ref } from 'vue'
import { useRouter } from 'vue-router';
import api from '../../api';
import { AuthenticationRequest } from '../../generated';
import { User } from '../../core/user';

interface State {
    request: AuthenticationRequest,
    loading: boolean,
}

const state: State = reactive({
    request: {
        username: "",
        password: ""
    },
    loading: false,
});

async function login() {
    state.loading = true;
    const response = await api.authApi.login(state.request);
    if (response.data.status === "Failed") {
        alert("login failed");
    } else {
        localStorage.setItem("tokens", JSON.stringify({ accessToken: response.data.accessToken, refreshToken: response.data.refreshToken }));
        const user = (await api.authApi.user()).data;
        localStorage.setItem("user", JSON.stringify(user));
    }
    state.loading = false;
    window.location = window.location;
}

async function logout() {
    state.loading = true;
    localStorage.removeItem("tokens");
    localStorage.removeItem("user");
    state.loading = false;
    window.location = window.location;
}

</script>

<template>
    <q-page-container>
        <template v-if="User.GetCurrent() == null">
            <q-input v-model="state.request.username" label="Username/Email" />
            <q-input type="password" v-model="state.request.password" label="Password" />
    
            <q-btn
                @click="login"
            >
                Login
            </q-btn>    
        </template>
        
        <template v-else>
            <h5>Currently logged in as</h5>
            <pre>
{{ User.GetCurrent() }}
            </pre>
            <q-btn
                @click="logout"
            >
                Logout
            </q-btn>
        </template>
    </q-page-container>
</template>
